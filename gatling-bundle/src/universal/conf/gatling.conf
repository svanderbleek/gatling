#########################
# Gatling Configuration #
#########################

# This file contains all the settings configurable for Gatling with their default values

gatling {
	core {
		#outputDirectoryBaseName = ""
		#runDescription = ""
		#encoding = "utf-8"							# encoding for every file manipulation made in gatling
		#simulationClass = ""
		#disableCompiler = false					# set to true to pass a simulationClass to be loaded directly from classpath
		extract {
			regex {
				#cache = true
			}
			xpath {
				#cache = true
			}
			jsonPath {
				#cache = true
				jackson {
					#allowComments = false
					#allowUnquotedFieldNames = false
					#allowSingleQuotes = false
				}
			}
			css {
				#cache = true
			}
		}
		timeOut {
			#simulation = 8640000						# in s
		}
		directory {
			#data = user-files/data
			#requestBodies = user-files/request-bodies
			#simulations = user-files/simulations
			#reportsOnly = ""
			#binaries = ""
			#results = results
		}
		zinc {
			#jvmArgs = "-Xss10M"
		}
	}
	charting {
		#noReports = false
		#statsTsvSeparator = "\t"
		#maxPlotPerSeries = 1000
		#accuracy = 10								# in ms
		indicators {
			#lowerBound = 800						# in ms
			#higherBound = 1200						# in ms
			#percentile1 = 95						# in percents
			#percentile2 = 99						# in percents
		}
	}
	http {
		#cacheELFileBodies = true					# cache request body EL templates
		#cacheRawFileBodies = false					# cache request body Raw templates
		#warmUpUrl = "http://goo.gl/xUrsE"			# URL used to warmUp the HTTP stack (blank means disabled)
		ssl {
			trustStore {
				#type = ""
				#file = ""
				#password = ""
				#algorithm = ""
			}
			keyStore {
				#type = ""
				#file = ""
				#password = ""
				#algorithm = ""
			}
		}
		ahc {
			#allowPoolingConnection = true				# allow pooling HTTP connections (keep-alive header automatically added)
			#allowSslConnectionPool = true				# allow pooling HTTPS connections (keep-alive header automatically added)
			#compressionEnabled = true   				# support gzipped responses
			#connectionTimeout = 60000					# timeout when establishing a connection
			#idleConnectionInPoolTimeoutInMs = 60000	# timeout when a connection stays unused in the pool
			#idleConnectionTimeoutInMs = 60000			# timeout when a used connection stays idle
			#maxConnectionLifeTimeInMs = -1				# max duration a connection can stay open
			#ioThreadMultiplier = 2						# number of Netty worker threads per core
			#maximumConnectionsPerHost = -1				# max number of connections per host (-1 means no limit)
			#maximumConnectionsTotal = -1				# max number of connections (-1 means no limit)
			#maxRetry = 4								# number of times that a request should be tried again
			#requestTimeoutInMs = 60000					# timeout of the requests
			#useProxyProperties = false					# support standard Proxy System properties 
			#useRawUrl = false							# use raw url instead of de-encoding them
			#webSocketIdleTimeoutInMs = 60000			# timeout when a used websocket connection stays idle
			#useRelativeURIsWithSSLProxies = false		# if relative uris should be used instead of absolute one when talking with an SSL proxy
		}
	}
	data {
		#writers = "console, file"
		#reader = file
		console {
			#light = false							# display a light version without detailed request stats
		}
		file {
			#bufferSize: 8192
		}
		jdbc {
			db{
				#url = "jdbc:mysql://localhost:3306/temp"
				#username = "root"
				#password = "123123q"
			}
			#bufferSize = 20
			create {
				#createRunRecordTable = "CREATE TABLE IF NOT EXISTS `RunRecords` ( `id` INT NOT NULL AUTO_INCREMENT , `runDate` DATETIME NULL , `simulationId` VARCHAR(45) NULL , `runDescription` VARCHAR(45) NULL , PRIMARY KEY (`id`) )"
				#createRequestRecordTable = "CREATE TABLE IF NOT EXISTS `RequestRecords` (`id` int(11) NOT NULL AUTO_INCREMENT, `runId` int DEFAULT NULL, `scenario` varchar(45) DEFAULT NULL, `userId` int DEFAULT NULL, `name` varchar(50) DEFAULT NULL, `requestStartDate` bigint DEFAULT NULL, `requestEndDate` bigint DEFAULT NULL, `responseStartDate` bigint DEFAULT NULL, `responseEndDate` bigint DEFAULT NULL, `status` varchar(2) DEFAULT NULL, `message` varchar(4500) DEFAULT NULL, `responseTime` bigint DEFAULT NULL, PRIMARY KEY (`id`) )"
				#createScenarioRecordTable = "CREATE TABLE IF NOT EXISTS `ScenarioRecords` (`id` int(11) NOT NULL AUTO_INCREMENT, `runId` int DEFAULT NULL, `scenarioName` varchar(45) DEFAULT NULL, `userId` int DEFAULT NULL, `event` varchar(50) DEFAULT NULL, `startDate` bigint DEFAULT NULL, `endDate` bigint DEFAULT NULL, PRIMARY KEY (`id`) )"
				#createGroupRecordTable = "CREATE TABLE IF NOT EXISTS `GroupRecords` (`id` int(11) NOT NULL AUTO_INCREMENT, `runId` int DEFAULT NULL, `scenarioName` varchar(45) DEFAULT NULL, `userId` int DEFAULT NULL, `entryDate` bigint DEFAULT NULL, `exitDate` bigint DEFAULT NULL, `status` varchar(2) DEFAULT NULL, PRIMARY KEY (`id`) )"
			}
			insert {
				#insertRunRecord = "INSERT INTO RunRecords (runDate, simulationId, runDescription) VALUES (?,?,?)"
				#insertRequestRecord = "INSERT INTO RequestRecords (runId, scenario, userId, name, requestStartDate, requestEndDate, responseStartDate, responseEndDate, status, message, responseTime) VALUES (?,?,?,?,?,?,?,?,?,?,?)"
				#insertScenarioRecord = "INSERT INTO ScenarioRecords (runId, scenarioName, userId, event, startDate, endDate) VALUES (?,?,?,?,?,?)"
				#insertGroupRecord = "INSERT INTO GroupRecords (runId, scenarioName, userId, entryDate, exitDate, status) VALUES (?,?,?,?,?,?)"
			}

		}
		graphite {
			#light = false							# only send the all* stats
			#host = "localhost"
			#port = 2003
			#protocol = "tcp" 						# Choose between 'tcp' or 'udp'
			#rootPathPrefix = "gatling"
			#bucketWidth = 100
			#bufferSize = 8192
		}
	}
}
